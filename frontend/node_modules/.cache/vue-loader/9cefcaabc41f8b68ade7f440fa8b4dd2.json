{"remainingRequest":"/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/src/components/rtwSelection.vue?vue&type=style&index=0&id=1ff8f727&scoped=true&lang=css&","dependencies":[{"path":"/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/src/components/rtwSelection.vue","mtime":1597225158878},{"path":"/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKaDEgewogIG1hcmdpbjogNXB4IDAgNDBweDsKfQpoMyB7CiAgbWFyZ2luOiAxMDBweCAwIDA7Cn0KdWwgewogIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTsKICBwYWRkaW5nOiA1cHg7Cn0KbGkgewogIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICBtYXJnaW46IDVweCA1cHg7Cn0KLm9rQUJDREUgewogIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Z3JlZW47Cn0KLm5vdE9rQUJDREUgewogIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Y29yYWw7Cn0K"},{"version":3,"sources":["rtwSelection.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"rtwSelection.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"rtw_selection\">\n    <div>\n      <h1>\n        <img\n          style=\"vertical-align: text-top;\"\n          alt=\"Universitätsklinikum Mannheim logo\"\n          src=\"../assets/umm_logo.png\"\n          height=\"50\"\n          width=\"150\"\n        />\n        Universitätsklinikum Mannheim\n      </h1>\n      <ul v-if=\"ambulances.length\">\n        <div v-if=\"ambulancesWithETAs.length\">\n          <li\n            v-for=\"(ambulance, index) in ambulances\"\n            v-bind:key=\"ambulance.identifier\"\n          >\n            <p v-if=\"index > 0\">\n              <button @click=\"selectRTW(ambulance)\">\n                <img src=\"../assets/ambulance.png\" width=\"100\" />\n                <br />\n                <br />\n                RTW - {{ ambulance.identifier }}\n                <br />\n                ETA: {{ ambulance.eta }}\n                <br />\n                Diagnose: {{ ambulance.diagnosis }}\n                <br />\n                <ul>\n                  <li\n                    v-for=\"(value, name) in ambulance.abcde_schema\"\n                    v-bind:key=\"name\"\n                  >\n                    <div class=\"text-center\">\n                      <button\n                        v-if=\"value === true\"\n                        disabled\n                        pill\n                        class=\"rounded-circle notOkABCDE\"\n                      >\n                        {{ name }}\n                      </button>\n                      <button\n                        v-else-if=\"value === false\"\n                        disabled\n                        pill\n                        class=\"rounded-circle okABCDE\"\n                      >\n                        {{ name }}\n                      </button>\n                    </div>\n                  </li>\n                </ul>\n              </button>\n            </p>\n          </li>\n        </div>\n        <div v-else class=\"d-flex justify-content-center\">\n          <div\n            class=\"spinner-border\"\n            style=\"position: fixed; top: 50%;\"\n            role=\"status\"\n          ></div>\n          <div style=\"position: fixed; top: 55%;\">\n            Berechne geschätzte Ankunftszeit\n          </div>\n        </div>\n      </ul>\n      <h3 v-else>... Aktuell fahren keine RTW's das UMM an ...</h3>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"RtwSelection\",\n  props: {\n    selectRTW: Function,\n    ambulances: Array\n  },\n  data: () => ({\n    arrivalTimes: [],\n    ambulancesWithETAs: [],\n    ambulancesWithNoETA: []\n    //rtwLocations: []\n  }),\n  methods: {\n    computeAllETAs: function() {\n      let request = new XMLHttpRequest();\n      var rtwLocations = [];\n      var index = 0;\n      //Prototyping; change rtwList to the reponse object; first item in this list has to be the UMM address\n      //Exception Handling: If no GNSS data is obtained, display rtw list without ETA\n      for (var rtw of this.ambulances) {\n        console.log(\"RTW: \" + JSON.stringify(rtw));\n        console.log(\"index: \" + index);\n        //For each RTW make a get request to obtian GNSS data and add to the rtwLocations []\n        if (!isNaN(rtw.gnssPosition.long) && !isNaN(rtw.gnssPosition.lat)) {\n          rtwLocations.push(\n            `[${rtw.gnssPosition.long}, ${rtw.gnssPosition.lat}]`\n          );\n        } else {\n          this.ambulancesWithNoETA.push(index);\n        }\n        index++;\n      }\n      console.log(\"rtwlocations: \" + rtwLocations);\n      if (rtwLocations.length > 1) {\n        request.open(\n          \"POST\",\n          \"https://api.openrouteservice.org/v2/matrix/driving-car\"\n        );\n\n        request.setRequestHeader(\n          \"Accept\",\n          \"application/json, application/geo+json, application/gpx+xml, img/png; charset=utf-8\"\n        );\n        request.setRequestHeader(\"Content-Type\", \"application/json\");\n        request.setRequestHeader(\n          \"Authorization\",\n          \"5b3ce3597851110001cf624801e9954029634268ad5336aa3eb55140\" //API Key\n        );\n        let context = this;\n        request.onreadystatechange = function() {\n          if (request.readyState === 4) {\n            context.arrivalTimes = JSON.parse(\n              request.responseText\n            ).durations[0];\n            context.mapETAs();\n            console.log(\"Status:\", request.status);\n            console.log(\"Headers:\", request.getAllResponseHeaders());\n            console.log(\"Body:\", request.responseText);\n          }\n        };\n        const body = `{\"locations\": [${rtwLocations}]}`;\n        request.send(body);\n      } else {\n        this.ambulances = [];\n      }\n    },\n    mapETAs: function() {\n      for (var aIndex of this.ambulancesWithNoETA) {\n        this.arrivalTimes.splice(aIndex, 0, \"No GNSS available\");\n      }\n\n      for (var i = 0; i < this.ambulances.length; i++) {\n        if (!this.ambulancesWithNoETA.includes(i)) {\n          this.ambulances[i].eta = this.secToTime(this.arrivalTimes[i]);\n        } else {\n          this.ambulances[i].eta =\n            \"Nicht berechenbar aufgrund fehlender GNSS Daten\";\n        }\n      }\n\n      this.ambulancesWithETAs = this.ambulances;\n    },\n    secToTime: function(etaInSec) {\n      console.log(\"sectoTime: \" + etaInSec);\n      if (!isNaN(etaInSec)) {\n        var seconds = Math.floor(etaInSec % 60).toString();\n        var minutes = Math.floor(etaInSec / 60).toString();\n        if (seconds.length === 1) {\n          seconds = \"0\" + seconds;\n        }\n        return minutes + \" Minuten \" + seconds + \" Sekunden\";\n      }\n    }\n  },\n  mounted: function() {\n    this.computeAllETAs();\n  }\n};\n</script>\n\n<style scoped>\nh1 {\n  margin: 5px 0 40px;\n}\nh3 {\n  margin: 100px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 5px;\n}\nli {\n  display: inline-block;\n  margin: 5px 5px;\n}\n.okABCDE {\n  background-color: lightgreen;\n}\n.notOkABCDE {\n  background-color: lightcoral;\n}\n</style>\n"]}]}