{"remainingRequest":"/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/src/App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/src/App.vue","mtime":1597668567786},{"path":"/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKI2FwcCB7CiAgZm9udC1mYW1pbHk6IEF2ZW5pciwgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsKICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDsKICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlOwogIHRleHQtYWxpZ246IGNlbnRlcjsKICBjb2xvcjogIzJjM2U1MDsKICBtaW4taGVpZ2h0OiAxMDB2aDsKfQo="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <div class=\"d-flex justify-content-center\" v-if=\"loading\">\n      <div\n        class=\"spinner-border\"\n        style=\"position: fixed; top: 50%;\"\n        role=\"status\"\n      ></div>\n      <div style=\"position: fixed; top: 55%;\">\n        Lade anfahrende Rettungswagen\n      </div>\n    </div>\n    <div v-else>\n      <RtwSelection\n        v-if=\"!rtwSelected && !loading\"\n        :selectRTW=\"selectRTW\"\n        :ambulances=\"rtwList\"\n      />\n      <div v-if=\"rtwSelected\">\n        <Header :changeRTW=\"changeRTW\" />\n        <PatientData :patientId=\"selectedRTW.patientId\" />\n        <div class=\"container-fluid\" v-if=\"rtwSelected\">\n          <div class=\"row align-items-start\">\n            <div class=\"col-2\">\n              <LeftSidebar :arrivalTime=\"selectedRTW.eta\" />\n            </div>\n            <div class=\"col-8\">\n              <MainComponent :Rtwdocument=\"rtwLocations[1]\" />\n            </div>\n            <div class=\"col-2\">\n              <RightSidebar />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Header from \"./components/header.vue\";\nimport PatientData from \"./components/patientData.vue\";\nimport RightSidebar from \"./components/rightSidebar.vue\";\nimport LeftSidebar from \"./components/leftSidebar.vue\";\nimport MainComponent from \"./components/mainComponent.vue\";\nimport RtwSelection from \"./components/rtwSelection.vue\";\nconst axios = require(\"axios\");\n\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      rtwSelected: false,\n      Rtwdocument: {\n        patientID: \"123\",\n        identifier: \"123\",\n        gnssPosition: {\n          time: Date,\n          long: 8.4660395,\n          lat: 49.4874592\n        }\n      },\n      rtwList: [\n        {\n          ambulanceId: 3,\n          patientId: 0,\n          identifier: \"Malteser Hilfsdienst - Mockobjekt\"\n        }\n      ],\n      loading: false,\n      selectedRTW: Object,\n      rtwLocations: [`[${8.487255}, ${49.492427}]`]\n    };\n  },\n  components: {\n    Header,\n    PatientData,\n    RightSidebar,\n    LeftSidebar,\n    MainComponent,\n    RtwSelection\n  },\n  methods: {\n    changeRTW: function() {\n      this.rtwSelected = !this.rtwSelected;\n      this.selectedRTW = Object;\n    },\n    selectRTW: function(rtw) {\n      this.rtwSelected = !this.rtwSelected;\n      this.selectedRTW = rtw; //TODO apply a watcher on selectedRTW; if selectedRTW != null, make get request every 5 seconds to get the current value of the selected RTW;\n      //same logic for the get patient request\n    },\n    getGnssdata: function() {\n      let config = {\n        method: \"get\",\n        url:\n          \"https://134.155.48.211:3000/ambulance/findGnssByAmbulanceId/\" +\n          this.selectedRTW.ambulanceId\n      };\n\n      axios(config)\n        .then(response => {\n          this.rtwLocations.splice(\n            1,\n            1,\n            `[${response.data.data.longitude}, ${response.data.data.latitude}]`\n          );\n          this.computeETA();\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    },\n    computeETA: function() {\n      let request = new XMLHttpRequest();\n      if (this.rtwLocations.length > 1) {\n        request.open(\n          \"POST\",\n          \"https://api.openrouteservice.org/v2/matrix/driving-car\"\n        );\n\n        request.setRequestHeader(\n          \"Accept\",\n          \"application/json, application/geo+json, application/gpx+xml, img/png; charset=utf-8\"\n        );\n        request.setRequestHeader(\"Content-Type\", \"application/json\");\n        request.setRequestHeader(\n          \"Authorization\",\n          \"5b3ce3597851110001cf62486cd746dbfa404187b5fee363289e8fed\" //API Key\n        );\n        let context = this;\n        request.onreadystatechange = function() {\n          if (request.readyState === 4) {\n            if (request.status === 200) {\n              context.selectedRTW.eta = context.secToTime(\n                JSON.parse(request.responseText).durations[1][0]\n              );\n              context.$forceUpdate();\n            } else {\n              context.selectedRTW = \"Fehler bei Routen Schnittstelle\";\n              context.$forceUpdate();\n            }\n          }\n        };\n        const body = `{\"locations\": [${this.rtwLocations}]}`;\n        request.send(body);\n      }\n    },\n    secToTime: function(etaInSec) {\n      if (!isNaN(etaInSec)) {\n        const rtwTimeReductionFactor = 0.734;\n        etaInSec = etaInSec * rtwTimeReductionFactor;\n        var seconds = Math.floor(etaInSec % 60).toString();\n        var minutes = Math.floor(etaInSec / 60).toString();\n        if (seconds.length === 1) {\n          seconds = \"0\" + seconds;\n        }\n        return minutes + \" Minuten \" + seconds + \" Sekunden\";\n      }\n    }\n  },\n  watch: {\n    rtwSelected: {\n      handler() {\n        // Request GNSS Data from Server every 10 Seconds\n        if (this.rtwSelected) {\n          this.interval = setInterval(() => {\n            this.getGnssdata();\n          }, 10000);\n        } else {\n          clearInterval(this.interval);\n        }\n      }\n    }\n  },\n  mounted: function() {\n    // Consume REST-API\n    let rtwAPI = \"https://134.155.48.211:3000/ambulance/findAll\";\n\n    this.loading = true;\n    axios\n      .get(rtwAPI)\n      .then(response => {\n        this.rtwList = response.data.data;\n        for (var r of this.rtwList) {\n          r.eta = 0;\n        }\n      })\n      .catch(errors => {\n        // react on errors.\n        console.error(\"AXIOS ERROR: \" + errors);\n      })\n      .finally(() => (this.loading = false));\n  }\n};\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  min-height: 100vh;\n}\n</style>\n"]}]}