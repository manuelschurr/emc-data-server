{"remainingRequest":"/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/src/components/stream.vue?vue&type=style&index=0&id=2df65990&scoped=true&lang=css&","dependencies":[{"path":"/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/src/components/stream.vue","mtime":1599667669237},{"path":"/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLml0ZW1TcGFjaW5nIHsKICBtYXJnaW46IDVweCAycHggMHB4IDJweDsKfQoucm93IHsKICBtYXJnaW46IDBweCAwcHg7Cn0K"},{"version":3,"sources":["stream.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkHA;AACA;AACA;AACA;AACA;AACA","file":"stream.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div v-if=\"selectedElements <= 2\">\n    <div\n      class=\"gallery\"\n      id=\"mainDiv\"\n      v-if=\"this.loading && this.captures.length != 0\"\n    >\n      <div class=\"gallery-panel\">\n        <img v-bind:src=\"chosenImage\" width=\"100%\" />\n      </div>\n      <div class=\"row\">\n        <div\n          class=\"itemSpacing\"\n          v-for=\"screenshot in captures\"\n          :key=\"screenshot\"\n        >\n          <img\n            v-on:click=\"clickMethod($event)\"\n            v-bind:src=\"screenshot\"\n            height=\"87\"\n          />\n        </div>\n      </div>\n    </div>\n    <div v-else>Aktuell wurden noch keine Bilder gemacht</div>\n  </div>\n  <div v-else>\n    <div\n      class=\"gallery\"\n      id=\"mainDiv\"\n      v-if=\"this.loading && this.captures.length != 0\"\n    >\n      <div class=\"gallery-panel\">\n        <img v-bind:src=\"chosenImage\" width=\"70%\" />\n      </div>\n    </div>\n    <div v-else>Aktuell wurden noch keine Bilder gemacht</div>\n  </div>\n</template>\n\n<script>\nconst axios = require(\"axios\");\nexport default {\n  name: \"camera\",\n  data() {\n    return {\n      captures: [],\n      imageStrings: [],\n      chosenImage: null,\n      loading: false,\n    };\n  },\n  props: {\n    selectedElements: Number,\n  },\n  mounted() {\n    this.fillData();\n  },\n  created() {\n    this.timer = setInterval(this.fillData, 5000);\n  },\n  methods: {\n    clickMethod: function (event) {\n      this.chosenImage = event.currentTarget.src;\n    },\n    async fillData() {\n      var vm = this;\n      this.loading = true;\n\n      var body = \"\";\n      var config = {\n        method: \"get\",\n        //\"https://localhost:3000/img/all\",\n        url: \"https://134.155.48.211:3000/img/all\",\n        headers: {},\n        data: body,\n      };\n\n      axios(config).then(function (response) {\n        if (response.data.statusCode === \"10000\") {\n          var newImageStrings = response.data.data;\n          var newToAdd = [];\n          for (var image of newImageStrings) {\n            if (!vm.imageStrings.includes(image)) {\n              vm.imageStrings.push(image);\n              newToAdd.push(image);\n            }\n          }\n          for (var imageStr of newToAdd) {\n            var bodyTwo = \"\";\n            var configGetImages = {\n              method: \"get\",\n              //\"https://localhost:3000/img/single/\" + imageStr,\n              url: \"https://134.155.48.211:3000/img/single/\" + imageStr,\n              responseType: \"blob\",\n              headers: {},\n              data: bodyTwo,\n            };\n            axios(configGetImages).then(function (responseImages) {\n              if (response.data.statusCode === \"10000\") {\n                var pic = URL.createObjectURL(responseImages.data);\n                vm.captures.push(pic);\n                vm.chosenImage = vm.captures[vm.captures.length - 1];\n              }\n            });\n          }\n        }\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.itemSpacing {\n  margin: 5px 2px 0px 2px;\n}\n.row {\n  margin: 0px 0px;\n}\n</style>\n"]}]}