{"remainingRequest":"/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/src/components/rtwSelection.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/src/components/rtwSelection.vue","mtime":1598889334271},{"path":"/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/marcguldner/GitHub/emc-data-server/frontend/trauma-room/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCnZhciBheGlvcyA9IHJlcXVpcmUoImF4aW9zIik7CgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIlJ0d1NlbGVjdGlvbiIsCiAgcHJvcHM6IHsKICAgIHNlbGVjdFJUVzogRnVuY3Rpb24sCiAgICBhbWJ1bGFuY2VzOiBBcnJheQogIH0sCiAgZGF0YTogKCkgPT4gKHsKICAgIGFycml2YWxUaW1lczogW10sCiAgICBhbWJ1bGFuY2VzV2l0aEVUQXM6IFtdLAogICAgYW1idWxhbmNlc1dpdGhOb0VUQTogW10sCiAgICBydHdMb2NhdGlvbnM6IFtgWyR7OC40ODcyNTV9LCAkezQ5LjQ5MjQyN31dYF0sCiAgICBzdGF0ZU1lc3NhZ2U6ICJCZXJlY2huZSBnZXNjaMOkdHp0ZSBBbmt1bmZ0c3plaXQiCiAgfSksCiAgbWV0aG9kczogewogICAgY29tcHV0ZUVUQTogZnVuY3Rpb24oY3VycmVudFJ0dykgewogICAgICBsZXQgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwogICAgICBpZiAodGhpcy5ydHdMb2NhdGlvbnMubGVuZ3RoID4gMSkgewogICAgICAgIHJlcXVlc3Qub3BlbigKICAgICAgICAgICJQT1NUIiwKICAgICAgICAgICJodHRwczovL2FwaS5vcGVucm91dGVzZXJ2aWNlLm9yZy92Mi9tYXRyaXgvZHJpdmluZy1jYXIiCiAgICAgICAgKTsKCiAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKAogICAgICAgICAgIkFjY2VwdCIsCiAgICAgICAgICAiYXBwbGljYXRpb24vanNvbiwgYXBwbGljYXRpb24vZ2VvK2pzb24sIGFwcGxpY2F0aW9uL2dweCt4bWwsIGltZy9wbmc7IGNoYXJzZXQ9dXRmLTgiCiAgICAgICAgKTsKICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoIkNvbnRlbnQtVHlwZSIsICJhcHBsaWNhdGlvbi9qc29uIik7CiAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKAogICAgICAgICAgIkF1dGhvcml6YXRpb24iLAogICAgICAgICAgIjViM2NlMzU5Nzg1MTExMDAwMWNmNjI0ODA4ZDFmOTU5ZGY1MzRhYzNhZGMwNjIwMjU2YTY4ZWM3IiAvL0FQSSBLZXkKICAgICAgICApOwogICAgICAgIGxldCBjb250ZXh0ID0gdGhpczsKICAgICAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYgKHJlcXVlc3QucmVhZHlTdGF0ZSA9PT0gNCkgewogICAgICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDIwMCkgewogICAgICAgICAgICAgIGN1cnJlbnRSdHcuZXRhID0gY29udGV4dC5zZWNUb1RpbWUoCiAgICAgICAgICAgICAgICBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KS5kdXJhdGlvbnNbMV1bMF0KICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIC8vIEFmdGVyIGNvbXB1dGluZyB0aGUgRVRBLCB0aGUgcGF0aWVudCBkaWFnbm9zaXMgKDUwIGZpcnN0IGNoYXJhY3RlcnMgb2YgdGhlIG1pc2NlbGxhbmVvdXMpIAogICAgICAgICAgICAgIC8vIGFuZCBBQkNERSBTY2hlbWEgaXMgZmV0Y2hlZCBmcm9tIHRoZSBzZXJ2ZXIuCiAgICAgICAgICAgICAgbGV0IGNvbmZpZyA9IHsKICAgICAgICAgICAgICAgIG1ldGhvZDogImdldCIsCiAgICAgICAgICAgICAgICB1cmw6CiAgICAgICAgICAgICAgICAgICJodHRwczovLzEzNC4xNTUuNDguMjExOjMwMDAvcGF0aWVudC9maW5kQnlBbWJ1bGFuY2VJZC8iICsKICAgICAgICAgICAgICAgICAgY3VycmVudFJ0dy5hbWJ1bGFuY2VJZAogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgdmFyIHBhdGllbnREYXRhID0ge307CiAgICAgICAgICAgICAgYXhpb3MoY29uZmlnKQogICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5zdGF0dXNDb2RlID09PSAiMTAwMDAiKSB7CiAgICAgICAgICAgICAgICAgICAgcGF0aWVudERhdGEgPSB7CiAgICAgICAgICAgICAgICAgICAgICBwYXRpZW50SWQ6IHJlc3BvbnNlLmRhdGEuZGF0YS5wYXRpZW50SWQsCiAgICAgICAgICAgICAgICAgICAgICBkaWFnbm9zaXM6IHJlc3BvbnNlLmRhdGEuZGF0YS5taXNjZWxsYW5lb3VzLnNsaWNlKDAsIDUwKSwKICAgICAgICAgICAgICAgICAgICAgIGFiY2RlX3NjaGVtYTogewogICAgICAgICAgICAgICAgICAgICAgICBBOiByZXNwb25zZS5kYXRhLmRhdGEuQUlzU2VsZWN0ZWQsCiAgICAgICAgICAgICAgICAgICAgICAgIEI6IHJlc3BvbnNlLmRhdGEuZGF0YS5CSXNTZWxlY3RlZCwKICAgICAgICAgICAgICAgICAgICAgICAgQzogcmVzcG9uc2UuZGF0YS5kYXRhLkNJc1NlbGVjdGVkLAogICAgICAgICAgICAgICAgICAgICAgICBEOiByZXNwb25zZS5kYXRhLmRhdGEuRElzU2VsZWN0ZWQsCiAgICAgICAgICAgICAgICAgICAgICAgIEU6IHJlc3BvbnNlLmRhdGEuZGF0YS5FSXNTZWxlY3RlZAogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4gewogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiQVhJT1MgUEFUSUVOVCBEQVRBIEVSUk9SOiAiICsgZXJyb3IpOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHsKICAgICAgICAgICAgICAgICAgY3VycmVudFJ0dy5wYXRpZW50SWQgPSBwYXRpZW50RGF0YS5wYXRpZW50SWQ7CiAgICAgICAgICAgICAgICAgIGN1cnJlbnRSdHcuZGlhZ25vc2lzID0gcGF0aWVudERhdGEuZGlhZ25vc2lzOwogICAgICAgICAgICAgICAgICBjdXJyZW50UnR3LmFiY2RlX3NjaGVtYSA9IHBhdGllbnREYXRhLmFiY2RlX3NjaGVtYTsKICAgICAgICAgICAgICAgICAgY29udGV4dC5hbWJ1bGFuY2VzV2l0aEVUQXMucHVzaChjdXJyZW50UnR3KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGN1cnJlbnRSdHcuZXRhID0gIkZlaGxlciBiZWkgUm91dGVuIFNjaG5pdHRzdGVsbGUiOwogICAgICAgICAgICAgIGNvbnRleHQuYW1idWxhbmNlc1dpdGhFVEFzLnB1c2goY3VycmVudFJ0dyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIGNvbnN0IGJvZHkgPSBgeyJsb2NhdGlvbnMiOiBbJHt0aGlzLnJ0d0xvY2F0aW9uc31dfWA7CiAgICAgICAgcmVxdWVzdC5zZW5kKGJvZHkpOwogICAgICB9CiAgICB9LAogICAgc2VjVG9UaW1lOiBmdW5jdGlvbihldGFJblNlYykgewogICAgICBpZiAoIWlzTmFOKGV0YUluU2VjKSkgewogICAgICAgIGNvbnN0IHJ0d1RpbWVSZWR1Y3Rpb25GYWN0b3IgPSAwLjczNDsKICAgICAgICBldGFJblNlYyA9IGV0YUluU2VjICogcnR3VGltZVJlZHVjdGlvbkZhY3RvcjsKICAgICAgICB2YXIgc2Vjb25kcyA9IE1hdGguZmxvb3IoZXRhSW5TZWMgJSA2MCkudG9TdHJpbmcoKTsKICAgICAgICB2YXIgbWludXRlcyA9IE1hdGguZmxvb3IoZXRhSW5TZWMgLyA2MCkudG9TdHJpbmcoKTsKICAgICAgICBpZiAoc2Vjb25kcy5sZW5ndGggPT09IDEpIHsKICAgICAgICAgIHNlY29uZHMgPSAiMCIgKyBzZWNvbmRzOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbWludXRlcyArICIgTWludXRlbiAiICsgc2Vjb25kcyArICIgU2VrdW5kZW4iOwogICAgICB9CiAgICB9LAogICAgZ2V0R25zc0RhdGE6IGZ1bmN0aW9uKCkgewogICAgICBmb3IgKHZhciBydHcgb2YgdGhpcy5hbWJ1bGFuY2VzKSB7CiAgICAgICAgaWYgKHJ0dy5hbWJ1bGFuY2VJZCkgewogICAgICAgICAgbGV0IGNvbmZpZyA9IHsKICAgICAgICAgICAgbWV0aG9kOiAiZ2V0IiwKICAgICAgICAgICAgdXJsOgogICAgICAgICAgICAgICJodHRwczovLzEzNC4xNTUuNDguMjExOjMwMDAvYW1idWxhbmNlL2ZpbmRHbnNzQnlBbWJ1bGFuY2VJZC8iICsKICAgICAgICAgICAgICBydHcuYW1idWxhbmNlSWQKICAgICAgICAgIH07CgogICAgICAgICAgYXhpb3MoY29uZmlnKQogICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuc3RhdHVzQ29kZSA9PT0gIjEwMDAwIikgewogICAgICAgICAgICAgICAgdGhpcy5ydHdMb2NhdGlvbnMuc3BsaWNlKAogICAgICAgICAgICAgICAgICAxLAogICAgICAgICAgICAgICAgICAxLAogICAgICAgICAgICAgICAgICBgWyR7cmVzcG9uc2UuZGF0YS5kYXRhLmxvbmdpdHVkZX0sICR7cmVzcG9uc2UuZGF0YS5kYXRhLmxhdGl0dWRlfV1gCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRSdHc7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBjIG9mIHRoaXMuYW1idWxhbmNlcykgewogICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5kYXRhLmFtYnVsYW5jZUlkID09PSBjLmFtYnVsYW5jZUlkKSB7CiAgICAgICAgICAgICAgICAgICAgY3VycmVudFJ0dyA9IGM7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGN1cnJlbnRSdHcubG9uZyA9IHJlc3BvbnNlLmRhdGEuZGF0YS5sb25naXR1ZGU7CiAgICAgICAgICAgICAgICBjdXJyZW50UnR3LmxhdCA9IHJlc3BvbnNlLmRhdGEuZGF0YS5sYXRpdHVkZTsKICAgICAgICAgICAgICAgIHRoaXMuY29tcHV0ZUVUQShjdXJyZW50UnR3KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgICAgICAgdmFyIGVycm9ySWQgPSBKU09OLnN0cmluZ2lmeShlcnJvci5jb25maWcudXJsLnNsaWNlKC0xKSk7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coCiAgICAgICAgICAgICAgICAiS2VpbmUgR05TUyBEYXRlbiB2ZXJmw7xnYmFyIGbDvHIgQW1idWxhbmNlSUQ6ICIgKyBlcnJvcklkCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICB0aGlzLnN0YXRlTWVzc2FnZSA9IEpTT04uc3RyaW5naWZ5KGVycm9yLm1lc3NhZ2UpOwoKICAgICAgICAgICAgICAvL2FkZCBJCiAgICAgICAgICAgICAgZm9yICh2YXIgZWEgb2YgdGhpcy5hbWJ1bGFuY2VzKSB7CiAgICAgICAgICAgICAgICBpZiAoYCIke2VhLmFtYnVsYW5jZUlkfSJgID09PSBlcnJvcklkKSB7CiAgICAgICAgICAgICAgICAgIGVhLmV0YSA9ICJLZWluZSBHTlNTIERhdGVuIHZlcmbDvGdiYXIiOwogICAgICAgICAgICAgICAgICB0aGlzLmFtYnVsYW5jZXNXaXRoRVRBcy5wdXNoKGVhKTsKICAgICAgICAgICAgICAgICAgdGhpcy4kZm9yY2VVcGRhdGUoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24oKSB7CiAgICB0aGlzLmdldEduc3NEYXRhKCk7CiAgfQp9Owo="},{"version":3,"sources":["rtwSelection.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0EA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"rtwSelection.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"rtw_selection\">\n    <div>\n      <h1>\n        <img\n          style=\"vertical-align: text-top;\"\n          alt=\"Universitätsklinikum Mannheim logo\"\n          src=\"../assets/umm_logo.png\"\n          height=\"50\"\n          width=\"150\"\n        />\n        Universitätsklinikum Mannheim\n      </h1>\n      <ul v-if=\"ambulances.length\">\n        <div v-if=\"ambulancesWithETAs.length\">\n          <li\n            v-for=\"ambulance in ambulancesWithETAs\"\n            v-bind:key=\"ambulance.identifier\"\n          >\n            <p>\n              <button @click=\"selectRTW(ambulance)\">\n                <img src=\"../assets/ambulance.png\" width=\"100\" />\n                <br />\n                <br />\n                RTW - {{ ambulance.identifier }}\n                <br />\n                ETA: {{ ambulance.eta }}\n                <br />\n                Diagnose: {{ ambulance.diagnosis }}\n                <br />\n                <ul>\n                  <li\n                    v-for=\"(value, name) in ambulance.abcde_schema\"\n                    v-bind:key=\"name\"\n                  >\n                    <div class=\"text-center\">\n                      <button\n                        v-if=\"value === true\"\n                        disabled\n                        pill\n                        class=\"rounded-circle notOkABCDE\"\n                      >\n                        {{ name }}\n                      </button>\n                      <button\n                        v-else-if=\"value === false\"\n                        disabled\n                        pill\n                        class=\"rounded-circle okABCDE\"\n                      >\n                        {{ name }}\n                      </button>\n                    </div>\n                  </li>\n                </ul>\n              </button>\n            </p>\n          </li>\n        </div>\n        <div v-else class=\"d-flex justify-content-center\">\n          <div\n            class=\"spinner-border\"\n            style=\"position: fixed; top: 50%;\"\n            role=\"status\"\n          ></div>\n          <div style=\"position: fixed; top: 55%;\">{{ stateMessage }}</div>\n        </div>\n      </ul>\n      <h3 v-else>... Aktuell fahren keine RTW's das UMM an ...</h3>\n    </div>\n  </div>\n</template>\n\n<script>\nvar axios = require(\"axios\");\n\nexport default {\n  name: \"RtwSelection\",\n  props: {\n    selectRTW: Function,\n    ambulances: Array\n  },\n  data: () => ({\n    arrivalTimes: [],\n    ambulancesWithETAs: [],\n    ambulancesWithNoETA: [],\n    rtwLocations: [`[${8.487255}, ${49.492427}]`],\n    stateMessage: \"Berechne geschätzte Ankunftszeit\"\n  }),\n  methods: {\n    computeETA: function(currentRtw) {\n      let request = new XMLHttpRequest();\n      if (this.rtwLocations.length > 1) {\n        request.open(\n          \"POST\",\n          \"https://api.openrouteservice.org/v2/matrix/driving-car\"\n        );\n\n        request.setRequestHeader(\n          \"Accept\",\n          \"application/json, application/geo+json, application/gpx+xml, img/png; charset=utf-8\"\n        );\n        request.setRequestHeader(\"Content-Type\", \"application/json\");\n        request.setRequestHeader(\n          \"Authorization\",\n          \"5b3ce3597851110001cf624808d1f959df534ac3adc0620256a68ec7\" //API Key\n        );\n        let context = this;\n        request.onreadystatechange = function() {\n          if (request.readyState === 4) {\n            if (request.status === 200) {\n              currentRtw.eta = context.secToTime(\n                JSON.parse(request.responseText).durations[1][0]\n              );\n              // After computing the ETA, the patient diagnosis (50 first characters of the miscellaneous) \n              // and ABCDE Schema is fetched from the server.\n              let config = {\n                method: \"get\",\n                url:\n                  \"https://134.155.48.211:3000/patient/findByAmbulanceId/\" +\n                  currentRtw.ambulanceId\n              };\n              var patientData = {};\n              axios(config)\n                .then(response => {\n                  if (response.data.statusCode === \"10000\") {\n                    patientData = {\n                      patientId: response.data.data.patientId,\n                      diagnosis: response.data.data.miscellaneous.slice(0, 50),\n                      abcde_schema: {\n                        A: response.data.data.AIsSelected,\n                        B: response.data.data.BIsSelected,\n                        C: response.data.data.CIsSelected,\n                        D: response.data.data.DIsSelected,\n                        E: response.data.data.EIsSelected\n                      }\n                    };\n                  }\n                })\n                .catch(error => {\n                  console.log(\"AXIOS PATIENT DATA ERROR: \" + error);\n                })\n                .then(() => {\n                  currentRtw.patientId = patientData.patientId;\n                  currentRtw.diagnosis = patientData.diagnosis;\n                  currentRtw.abcde_schema = patientData.abcde_schema;\n                  context.ambulancesWithETAs.push(currentRtw);\n                });\n            } else {\n              currentRtw.eta = \"Fehler bei Routen Schnittstelle\";\n              context.ambulancesWithETAs.push(currentRtw);\n            }\n          }\n        };\n        const body = `{\"locations\": [${this.rtwLocations}]}`;\n        request.send(body);\n      }\n    },\n    secToTime: function(etaInSec) {\n      if (!isNaN(etaInSec)) {\n        const rtwTimeReductionFactor = 0.734;\n        etaInSec = etaInSec * rtwTimeReductionFactor;\n        var seconds = Math.floor(etaInSec % 60).toString();\n        var minutes = Math.floor(etaInSec / 60).toString();\n        if (seconds.length === 1) {\n          seconds = \"0\" + seconds;\n        }\n        return minutes + \" Minuten \" + seconds + \" Sekunden\";\n      }\n    },\n    getGnssData: function() {\n      for (var rtw of this.ambulances) {\n        if (rtw.ambulanceId) {\n          let config = {\n            method: \"get\",\n            url:\n              \"https://134.155.48.211:3000/ambulance/findGnssByAmbulanceId/\" +\n              rtw.ambulanceId\n          };\n\n          axios(config)\n            .then(response => {\n              if (response.data.statusCode === \"10000\") {\n                this.rtwLocations.splice(\n                  1,\n                  1,\n                  `[${response.data.data.longitude}, ${response.data.data.latitude}]`\n                );\n                var currentRtw;\n                for (var c of this.ambulances) {\n                  if (response.data.data.ambulanceId === c.ambulanceId) {\n                    currentRtw = c;\n                  }\n                }\n                currentRtw.long = response.data.data.longitude;\n                currentRtw.lat = response.data.data.latitude;\n                this.computeETA(currentRtw);\n              }\n            })\n            .catch(error => {\n              var errorId = JSON.stringify(error.config.url.slice(-1));\n              console.log(\n                \"Keine GNSS Daten verfügbar für AmbulanceID: \" + errorId\n              );\n              this.stateMessage = JSON.stringify(error.message);\n\n              //add I\n              for (var ea of this.ambulances) {\n                if (`\"${ea.ambulanceId}\"` === errorId) {\n                  ea.eta = \"Keine GNSS Daten verfügbar\";\n                  this.ambulancesWithETAs.push(ea);\n                  this.$forceUpdate();\n                }\n              }\n            });\n        }\n      }\n    }\n  },\n  mounted: function() {\n    this.getGnssData();\n  }\n};\n</script>\n\n<style scoped>\nh1 {\n  margin: 5px 0 40px;\n}\nh3 {\n  margin: 100px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 5px;\n}\nli {\n  display: inline-block;\n  margin: 5px 5px;\n}\n.okABCDE {\n  background-color: lightgreen;\n}\n.notOkABCDE {\n  background-color: lightcoral;\n}\n</style>\n"]}]}